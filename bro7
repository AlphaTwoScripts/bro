
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local http = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- Get current place ID to determine which features to show
local CurrentPlaceId = game.PlaceId
print("Current Place ID: " .. CurrentPlaceId)
local isInMainMenu = (CurrentPlaceId == 13379208636)


local Window = Fluent:CreateWindow({
    Title = "Attack On Titan Revolution " .. Fluent.Version,
    SubTitle = "by Ahjin",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create all tabs regardless of game state
local Tabs = {
    Features = Window:AddTab({ Title = "Features", Icon = "rocket" }),
	Teleport = Window:AddTab({ Title = "Teleport", Icon = "map-pin" }),
    Tracker = Window:AddTab({ Title = "Rewards Tracker", Icon = "eye" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "palette" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- Welcome notification
Fluent:Notify({
    Title = "AOT:R Autofarm",
    Content = "Script has been loaded successfully. Current Place ID: " .. CurrentPlaceId,
    Duration = 5
})

-- Function for the Nape Extender feature
local function extendNape()
    while Options.NapeExtender.Value do
        if not Options.NapeExtender.Value then return end
        
        -- Check if Titans folder exists
        local titansFolder = game:GetService("Workspace"):FindFirstChild("Titans")
        if not titansFolder then
            print("Titans folder not found. Wait and retry...")
            wait(1)
            continue
        end
        
        for i, titans in pairs(titansFolder:GetChildren()) do
            local stepone = titans:FindFirstChild("Hitboxes")
            if stepone then
                local steptwo = stepone:FindFirstChild("Hit")
                if steptwo then
                    local final = steptwo:FindFirstChild("Nape")
                    if final then
                        final.Size = Vector3.new(Options.HitboxSize.Value, Options.HitboxSize.Value, Options.HitboxSize.Value)
                        final.Transparency = 0.85
                        final.CanCollide = false
                    end
                end
            end
        end
        wait(0.05)
    end
end

-- Add features to the Features tab based on game state
if not isInMainMenu then
    -- Add Nape Extender toggle
    local NapeToggle = Tabs.Features:AddToggle("NapeExtender", {
        Title = "Nape Extender",
        Default = false,
        Description = "Enlarges titan nape hitboxes for easier hits",
        Callback = function(Value)
            if Value then
                task.spawn(extendNape)
            end
        end
    })

    -- Add the autofarm toggle
    local AutofarmToggle = Tabs.Features:AddToggle("Autofarm", {
        Title = "OP Autofarm",
        Default = false,
        Description = "Required Steel and Trust skills",
        Callback = function(Value)
            if Value then
                local Players = game:GetService("Players")
                local workspace = game:GetService("Workspace")
                local VIP = game:GetService("VirtualInputManager")
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local RunService = game:GetService("RunService")

                local player = Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local rootPart = character:WaitForChild("HumanoidRootPart")

                -- Enlarge titan hitboxes
                local titans = workspace.Titans:GetChildren()
                for _, titan in ipairs(titans) do
                    local Hitboxes = titan:FindFirstChild("Hitboxes")
                    if Hitboxes then
                        local Hit = Hitboxes:FindFirstChild("Hit")
                        if Hit then
                            local Nape = Hit:FindFirstChild("Nape")
                            if Nape then
                                print("Found Nape")
                                
                                -- Resize the Nape hitbox
                                Nape.Size = Vector3.new(Options.HitboxSize.Value, Options.HitboxSize.Value, Options.HitboxSize.Value)
                                
                                -- Teleport Nape to 5 studs in front of the player's character
                                local frontOffset = rootPart.CFrame.LookVector * 5
                                Nape.Position = rootPart.Position + frontOffset
                                
                                -- Ensure Nape is anchored
                                Nape.Anchored = true
                            end
                        end
                    end
                end

                -- The fixed position you want to lock the player to
                local fixedPosition = Vector3.new(rootPart.Position.X, rootPart.Position.Y, rootPart.Position.Z)
                
                -- Allowable vertical movement range
                local verticalRange = 5
                
                -- Function to keep the player in place
                local function keepPlayerInPlace()
                    local yPos = math.clamp(rootPart.Position.Y, fixedPosition.Y - verticalRange, fixedPosition.Y + verticalRange)
                    rootPart.CFrame = CFrame.new(fixedPosition.X, yPos, fixedPosition.Z)
                end
                
                -- Run the function on every frame
                local connectionRef = RunService.RenderStepped:Connect(keepPlayerInPlace)
                
                -- Simulate key event for the first skill
                VIP:SendKeyEvent(true, Enum.KeyCode.One, false, game)
                task.wait(0.1)
                
                -- Find Thrust and Steel parts and modify them
                local Thrust = workspace:FindFirstChild("HakerOreoScary_Thrust")
                local Steel = workspace:FindFirstChild("HakerOreoScary_Steel")
                
                if Thrust then
                    Thrust.Size = Vector3.new(1999, 1999, 1999)
                    Thrust.CanCollide = false
                end
                
                task.wait(2)
                
                -- Simulate key event for the second skill
                VIP:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
                task.wait(0.1)
                
                if Steel then
                    Steel.Size = Vector3.new(1999, 1999, 1999)
                    Steel.CanCollide = false
                end
                
                -- Path to the Slay object
                local Slay = ReplicatedStorage.Objectives:WaitForChild("Slay")
                
                -- Requirement attribute
                local requirement = Slay:GetAttribute("Requirement")
                
                -- Wait for Slay.Value to meet the requirement before proceeding with key events
                while Slay.Value ~= requirement do
                    task.wait(0.1)
                    -- Check if toggle was turned off
                    if not Options.Autofarm.Value then
                        if connectionRef then
                            connectionRef:Disconnect()
                        end
                        return
                    end
                end
                
                task.wait(1)
                
                VIP:SendKeyEvent(true, Enum.KeyCode.BackSlash, false, game)
                task.wait(0.1)
                VIP:SendKeyEvent(true, Enum.KeyCode.Right, false, game)
                task.wait(0.1)
                VIP:SendKeyEvent(true, Enum.KeyCode.Right, false, game)
                task.wait(0.1)
                VIP:SendKeyEvent(true, Enum.KeyCode.Return, false, game) -- Key down
                VIP:SendKeyEvent(false, Enum.KeyCode.Return, false, game) -- Key up
            end
        end
    })

    -- Add a hitbox size slider to Features tab
    local HitboxSlider = Tabs.Features:AddSlider("HitboxSize", {
        Title = "Hitbox Size",
        Description = "Adjust the size of titan hitboxes",
        Default = 250,
        Min = 10,
        Max = 500,
        Rounding = 0,
        Callback = function(Value)
            -- This value will be used in the Nape Extender function
            print("Hitbox size set to:", Value)
        end
    })

	local AutoEscapeToggle = Tabs.Features:AddToggle("AutoEscapeEnabled", {
    Title = "Auto Escape",
    Default = false,
    Description = "",
    Callback = function(Value)
        -- Auto Escape Script
        local VIM = game:GetService("VirtualInputManager")
        getgenv().autoescape = Value
        
        if Value then
            -- Create a new connection when enabled
            _G.AutoEscapeConnection = task.spawn(function()
                while task.wait(0.3) do 
                    if not getgenv().autoescape then break end 
                    for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Interface.Buttons:GetChildren()) do 
                        if v ~= nil then 
                            VIM:SendKeyEvent(true, string.sub(tostring(v), 1, 1), false, game) 
                        end 
                    end
                end
            end)
        else
            -- Stop the loop when disabled
            getgenv().autoescape = false
            if _G.AutoEscapeConnection then
                task.cancel(_G.AutoEscapeConnection)
                _G.AutoEscapeConnection = nil
            end
        end
    end
})

-- Add Anti-Injury feature
local AntiInjuryToggle = Tabs.Features:AddToggle("AntiInjury", {
    Title = "Anti Injury",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Enable Anti-Injury
            local Players = game:GetService("Players")
            local lp = Players.LocalPlayer
            local char = lp.Character or lp.CharacterAdded:Wait()
            
            -- Create a function to handle all Anti-Injury logic
            local function setupAntiInjury(character)
                local humanoid = character:WaitForChild("Humanoid")
                
                -- Prevent ragdoll and hurt animations
                for _, v in ipairs(character:GetDescendants()) do
                    if v:IsA("RemoteEvent") and (v.Name:lower():find("hurt") or v.Name:lower():find("ragdoll")) then
                        v:Destroy()
                    end
                end
                
                -- Constantly block new ragdoll/hurt events
                local descendantConn = character.DescendantAdded:Connect(function(obj)
                    if obj:IsA("RemoteEvent") and (obj.Name:lower():find("hurt") or obj.Name:lower():find("ragdoll")) then
                        obj:Destroy()
                    end
                end)
                
                -- Restore health if reduced (basic protection)
                local lastHealth = humanoid.Health
                local healthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
                    if humanoid.Health < lastHealth then
                        humanoid.Health = lastHealth
                    else
                        lastHealth = humanoid.Health
                    end
                end)
                
                -- Auto-fix if Humanoid gets forced into ragdoll states
                local stateConn = humanoid.StateChanged:Connect(function(old, new)
                    if new == Enum.HumanoidStateType.Ragdoll or 
                       new == Enum.HumanoidStateType.Physics or 
                       new == Enum.HumanoidStateType.FallingDown then
                        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                    end
                end)
                
                -- Store connections for cleanup
                character:SetAttribute("AntiInjuryEnabled", true)
                character:SetAttribute("AntiInjuryDescConn", tostring(descendantConn))
                character:SetAttribute("AntiInjuryHealthConn", tostring(healthConn))
                character:SetAttribute("AntiInjuryStateConn", tostring(stateConn))
            end
            
            -- Set up anti-injury for current character
            if char then
                setupAntiInjury(char)
            end
            
            -- Handle character respawn
            lp.CharacterAdded:Connect(function(newChar)
                if AntiInjuryToggle:GetState() then
                    setupAntiInjury(newChar)
                end
            end)
        else
            -- Disable Anti-Injury
            local lp = Players.LocalPlayer
            local char = lp.Character
            
            if char and char:GetAttribute("AntiInjuryEnabled") then
                char:SetAttribute("AntiInjuryEnabled", false)
                -- Clean up connections would go here if we had a way to store them
                -- For now we'll just flag it as disabled
            end
        end
    end
})

-- Information paragraph for Features tab
    Tabs.Features:AddParagraph({
        Title = "Information",
        Content = "auto-kills titans by making their weak spots bigger and attacking for you."
    })
else

    -- Add a message for Features tab when in main menu
    Tabs.Features:AddParagraph({
        Title = "Combat Features Unavailable",
        Content = "Combat features are only available during missions. Please join a mission to access Nape Extender, Autofarm, and other combat features."
    })
end

-- First create a dropdown for the slashing mode
local SlashModeDropdown = Tabs.Features:AddDropdown("SlashMode", {
    Title = "Farm Mode",
    Values = {"Risky", "Safe", "Normal"},
    Default = "Normal",
    Multi = false,
    Description = "Your Choice"
})

-- Then create the toggle with the dropdown reference
local SlashThroughHitboxToggle = Tabs.Features:AddToggle("SlashThroughHitbox", {
    Title = "Auto Farm",
    Default = false,
    Description = "",
    Callback = function(Value)
        _G.SlashThroughHitboxEnabled = Value -- Global variable to track state
        
        if Value then
            -- Services
            local Players = game:GetService("Players")
            local Workspace = game:GetService("Workspace")
            local VIM = game:GetService("VirtualInputManager")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local RunService = game:GetService("RunService")
            local TweenService = game:GetService("TweenService")

            -- Get the current slash mode
            local currentSlashMode = SlashModeDropdown.Value

            -- Configuration
            local Options = {
                AutoFarm = { Value = true },
                NapeExtender = { Value = true },
                HitboxSize = { Value = 35 },
                MoveSpeed = 120,
                SlashSpeed = 130,
                SlashDistance = 15,
                AttackDuration = 4,
                WaitAfterCompletion = 2.5,
                ClickOffsetX = 50,
                ClickOffsetY = 60,
                AttackHeight = { Value = 300 } -- Fixed at 300 studs
            }

            -- Adjust settings based on selected mode
            if currentSlashMode == "Risky" then
                -- Risky mode: Faster movement, higher attack speed
                Options.MoveSpeed = 300
                Options.SlashSpeed = 150
            elseif currentSlashMode == "Safe" then
                -- Safe mode: Slower movement, more careful
                Options.MoveSpeed = 70    -- Slower movement
                Options.SlashSpeed = 90   -- Slower slashing
                Options.AttackDuration = 5 -- Longer attacks for more precision
            end

            -- References
            local player = Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local hrp = character:WaitForChild("HumanoidRootPart")
            
            -- Connections for cleanup
            local connections = {}
            local currentTween = nil
            local isSlashing = false
            local currentTargetTitan = nil  -- Track the current titan being targeted
            local lastGroundY = hrp.Position.Y -- Track last ground Y position

            -- Function to check if a titan is alive and valid
            local function isTitanValid(titan)
                return titan and 
                       titan:IsDescendantOf(Workspace) and 
                       titan:FindFirstChild("Humanoid") and 
                       titan.Humanoid.Health > 0
            end

            -- This function will continuously check if the current target titan is still valid
            local function setupTitanMonitor()
                local connection = RunService.Heartbeat:Connect(function()
                    if currentTargetTitan and not isTitanValid(currentTargetTitan) then
                        -- Titan died or became invalid, force stop slashing
                        isSlashing = false
                        currentTargetTitan = nil
                    end
                end)
                table.insert(connections, connection)
            end

            -- Movement function with fixed height implementation
            local function moveToPosition(targetPos, titan)
                if not isTitanValid(titan) then
                    return false
                end
                
                -- Always set the y-position to the fixed height of 300
                targetPos = Vector3.new(targetPos.X, Options.AttackHeight.Value, targetPos.Z)

                -- Normal movement for all modes
                local distance = (targetPos - hrp.Position).Magnitude
                local duration = distance / Options.MoveSpeed
                local startTime = tick()
                
                local startPos = hrp.Position
                
                while tick() - startTime < duration and _G.SlashThroughHitboxEnabled do
                    -- Check if titan is still valid during movement
                    if not isTitanValid(titan) then
                        return false
                    end
                    
                    local alpha = (tick() - startTime) / duration
                    alpha = math.min(alpha, 1)
                    
                    local newPos = startPos:Lerp(targetPos, alpha)
                    hrp.CFrame = CFrame.new(newPos)
                    
                    task.wait()
                end
                
                return _G.SlashThroughHitboxEnabled
            end
            
            -- Slash function with fixed height implementation
            local function moveSlash(startPos, endPos, titan)
                if not isTitanValid(titan) then
                    return false
                end
                
                -- Ensure both start and end positions are at fixed height of 300
                startPos = Vector3.new(startPos.X, Options.AttackHeight.Value, startPos.Z)
                endPos = Vector3.new(endPos.X, Options.AttackHeight.Value, endPos.Z)
                
                -- Normal movement for all mod
