local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Attack On Titan Revolution " .. Fluent.Version,
    SubTitle = "by Ahjin",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
    Mission = Window:AddTab({ Title = "Mission", Icon = "target" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- Single notification when script loads
Fluent:Notify({
    Title = "Lobby",
    Content = "loaded",
    Duration = 5
})

-- Variables to track mission state
local missionActive = false
local currentMission = nil

-- Mission Tab Implementation
do
    -- Add a description paragraph to explain the mission tab
    Tabs.Mission:AddParagraph({
        Title = "Mission Creator",
        Content = "Create and start missions with custom maps, difficulties, and objectives."
    })

    -- Map selection dropdown
    local MapDropdown = Tabs.Mission:AddDropdown("MapDropdown", {
        Title = "Select Map",
        Description = "Choose the map for your mission",
        Values = {"Shiganshina", "Trost", "Giant Forest", "Outskirts", "Utgard", "Loading Docks", "Stohess"},
        Multi = false,
        Default = "Shiganshina",
    })

    -- Difficulty selection dropdown
    local DifficultyDropdown = Tabs.Mission:AddDropdown("DifficultyDropdown", {
        Title = "Select Difficulty",
        Description = "Choose the difficulty level",
        Values = {"Easy", "Normal", "Hard", "Severe", "Aberrant"},
        Multi = false,
        Default = "Normal",
    })

    -- Objective selection dropdown
    local ObjectiveDropdown = Tabs.Mission:AddDropdown("ObjectiveDropdown", {
        Title = "Select Objective",
        Description = "Choose the mission objective",
        Values = {"Skirmish", "Holdout", "Annihilation"},
        Multi = false,
        Default = "Skirmish",
    })

    -- Mission Type dropdown (added in case user wants to choose between Missions/Raids)
    local MissionTypeDropdown = Tabs.Mission:AddDropdown("MissionTypeDropdown", {
        Title = "Mission Type",
        Description = "Choose between Missions or Raids",
        Values = {"Missions", "Raids"},
        Multi = false,
        Default = "Missions",
    })
    
    -- Modifiers multiselect dropdown
    local ModifiersDropdown = Tabs.Mission:AddDropdown("ModifiersDropdown", {
        Title = "Select Modifiers",
        Description = "Choose modifiers to apply to your mission",
        Values = {
            "No Perks", 
            "No Skills", 
            "No Talents", 
            "Nightmare",
            "Oddball",
            "Injury Prone",
            "Chronic Injuries",
            "Fog",
            "Glass Cannon",
            "Time Trial",
            "Boring",
            "Simple"
        },
        Multi = true,
        Default = {},
    })

    -- Add a toggle button for Create & Start Mission
    local CreateStartToggle = Tabs.Mission:AddToggle("CreateStartToggle", {
        Title = "Create & Start Mission",
        Description = "",
        Default = false,
        Callback = function(Value)
            local GET = game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET")
            
            if Value then -- Toggle is ON - Create and start mission
                -- Get the selected values from dropdowns
                local mapName = Options.MapDropdown.Value
                local difficulty = Options.DifficultyDropdown.Value
                local objective = Options.ObjectiveDropdown.Value
                local missionType = Options.MissionTypeDropdown.Value
                
                -- Construct the mission data
                local missionData = {
                    Name = mapName,
                    Difficulty = difficulty,
                    Type = missionType,
                    Objective = objective
                }
                
                -- Create the mission
                local success, result = pcall(function()
                    return GET:InvokeServer("S_Missions", "Create", missionData)
                end)
                
                if success then
                    -- Store the current mission for potential cancellation
                    currentMission = result
                    missionActive = true
                    
                    -- Apply modifiers if any are selected
                    local selectedModifiers = Options.ModifiersDropdown.Value
                    local modifiersList = {}
                    
                    -- Convert the table of modifiers to a comma-separated string
                    for modifier, isSelected in pairs(selectedModifiers) do
                        if isSelected then
                            table.insert(modifiersList, modifier)
                        end
                    end
                    
                    -- If any modifiers were selected, apply them
                    if #modifiersList > 0 then
                        local modifiersString = table.concat(modifiersList, ",")
                        
                        -- Apply modifiers to the mission
                        pcall(function()
                            if result then
                                result:SetAttribute("Modifiers", modifiersString)
                            end
                        end)
                    end
                    
                    -- Start the mission
                    task.wait(1)
                    local ok, msg = pcall(function()
                        return GET:InvokeServer("S_Missions", "Start")
                    end)
                    
                    if ok then
                        Fluent:Notify({
                            Title = "Mission Status",
                            Content = "Mission created and started successfully!",
                            Duration = 5
                        })
                    else
                        Fluent:Notify({
                            Title = "Mission Status",
                            Content = "⚠️ Mission created but failed to start: " .. tostring(msg),
                            Duration = 5
                        })
                        Options.CreateStartToggle:SetValue(false)
                        missionActive = false
                    end
                else
                    Fluent:Notify({
                        Title = "Mission Status",
                        Content = "❌ Failed to create mission: " .. tostring(result),
                        Duration = 5
                    })
                    Options.CreateStartToggle:SetValue(false)
                    missionActive = false
                end
            else -- Toggle is OFF - Cancel mission if active
                if missionActive and currentMission then
                    -- Attempt to cancel the mission (if your game has this functionality)
                    pcall(function()
                        GET:InvokeServer("S_Missions", "Cancel")
                    end)
                    
                    Fluent:Notify({
                        Title = "Mission Status",
                        Content = "Mission cancelled",
                        Duration = 3
                    })
                    
                    missionActive = false
                    currentMission = nil
                end
            end
        end
    })

    -- Add a button to create mission without starting (simplified)
    Tabs.Mission:AddButton({
        Title = "Create Mission Only",
        Description = "Creates the mission with selected settings without starting it",
        Callback = function()
            local GET = game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET")
            
            -- Get the selected values from dropdowns
            local mapName = Options.MapDropdown.Value
            local difficulty = Options.DifficultyDropdown.Value
            local objective = Options.ObjectiveDropdown.Value
            local missionType = Options.MissionTypeDropdown.Value
            
            -- Construct the mission data
            local missionData = {
                Name = mapName,
                Difficulty = difficulty,
                Type = missionType,
                Objective = objective
            }
            
            -- Create the mission
            local success, result = pcall(function()
                return GET:InvokeServer("S_Missions", "Create", missionData)
            end)
            
            if success then
                -- Apply modifiers if any are selected
                local selectedModifiers = Options.ModifiersDropdown.Value
                local modifiersList = {}
                
                -- Convert the table of modifiers to a comma-separated string
                for modifier, isSelected in pairs(selectedModifiers) do
                    if isSelected then
                        table.insert(modifiersList, modifier)
                    end
                end
                
                -- If any modifiers were selected, apply them
                if #modifiersList > 0 then
                    local modifiersString = table.concat(modifiersList, ",")
                    
                    -- Apply modifiers to the mission
                    pcall(function()
                        if result then
                            result:SetAttribute("Modifiers", modifiersString)
                        end
                    end)
                end
                
                Fluent:Notify({
                    Title = "Mission Status",
                    Content = "Mission created successfully",
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "Mission Status",
                    Content = "Failed to create mission",
                    Duration = 5
                })
            end
        end
    })

    -- Simple button to start existing mission
    Tabs.Mission:AddButton({
        Title = "Start Existing Mission",
        Description = "Starts an already created mission (if you are the leader)",
        Callback = function()
            local GET = game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("Remotes"):WaitForChild("GET")
            
            -- Attempt to start the mission
            local ok, msg = pcall(function()
                return GET:InvokeServer("S_Missions", "Start")
            end)
            
            if not ok then
                Fluent:Notify({
                    Title = "Mission Status",
                    Content = "Failed to start mission",
                    Duration = 5
                })
            end
        end
    })
end

-- Addons setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

-- LoadAutoloadConfig
SaveManager:LoadAutoloadConfig()
